import * as path from "path";

import { app, BrowserWindow, Tray, Menu, nativeImage, Notification } from "electron";
import registerListeners from "./helpers/ipc/listeners-register";

import { ActivityRecord } from "./types/activity";
import { logger, initLoggerServer } from "./helpers/logger";

// "electron-squirrel-startup" seems broken when packaging with vite
//import started from "electron-squirrel-startup";

const inDevelopment: boolean = process.env.NODE_ENV === "development";
let mainWindow: BrowserWindow | null = null;
let tray: Tray | null = null;
let isQuiting: boolean = false;

async function createTray() {
  // Request notification permission on macOS
  if (process.platform === "darwin") {
    await app.whenReady();
    if (!Notification.isSupported()) {
      logger.debug("Notifications not supported");
    }
  }

  const iconPath =
    process.platform === "win32"
      ? path.join(__dirname, "../resources/icon.ico")
      : path.join(__dirname, "../resources/icon.png");
  logger.debug("Main: Icon path", iconPath);
  const icon = nativeImage.createFromPath(iconPath);
  // Remove resize for Windows
  if (process.platform === "darwin") {
    icon.resize({ width: 18, height: 18 });
    icon.setTemplateImage(true);
  }

  tray = new Tray(icon);

  const contextMenu = Menu.buildFromTemplate([
    {
      label: "Show",
      click: () => {
        if (mainWindow) {
          mainWindow.show();
          mainWindow.focus();
        }
      },
    },
    {
      label: "Quit",
      click: () => {
        app.quit();
      },
    },
  ]);

  tray.setContextMenu(contextMenu);
  tray.setToolTip("iTracksy");

  tray.setTitle("iTracksy");

  tray.on("click", () => {
    if (!mainWindow) {
      createWindow();
    } else {
      mainWindow.show();
      mainWindow.focus();
    }
  });
}

function createWindow(): void {
  const preload = path.join(__dirname, "preload.js");
  const iconPath = path.join(__dirname, "../resources/icon.ico");
  mainWindow = new BrowserWindow({
    width: 1200,
    height: 800,
    icon: iconPath, // Add this line
    webPreferences: {
      devTools: true,
      contextIsolation: true,
      nodeIntegration: true,
      nodeIntegrationInSubFrames: false,
      preload: preload,
    },
    titleBarStyle: "hidden",
  });

  if (MAIN_WINDOW_VITE_DEV_SERVER_URL) {
    mainWindow.loadURL(MAIN_WINDOW_VITE_DEV_SERVER_URL);
  } else {
    mainWindow.loadFile(path.join(__dirname, `../renderer/${MAIN_WINDOW_VITE_NAME}/index.html`));
  }

  registerListeners(mainWindow, tray);

  mainWindow.on("close", (event) => {
    if (!isQuiting) {
      event.preventDefault();
      mainWindow?.hide();
    }
  });
}

// Initialize app when ready
app.whenReady().then(async () => {
  await initLoggerServer();
  await createTray();
  createWindow();
});

// Handle app quit
app.on("before-quit", () => {
  isQuiting = true;
});

//osX only
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  } else if (mainWindow) {
    mainWindow.show();
    mainWindow.focus();
  }
});
//osX only ends
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Vite
// plugin that tells the Electron app where to look for the Vite-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_VITE_DEV_SERVER_URL: string;
declare const MAIN_WINDOW_VITE_NAME: string;

// Preload types
interface ThemeModeContext {
  toggle: () => Promise<boolean>;
  dark: () => Promise<void>;
  light: () => Promise<void>;
  system: () => Promise<boolean>;
  current: () => Promise<"dark" | "light" | "system">;
}
interface ElectronWindow {
  minimize: () => Promise<void>;
  maximize: () => Promise<void>;
  close: () => Promise<void>;
  startTracking: (params: {
    accessibilityPermission: boolean;
    screenRecordingPermission: boolean;
    blockedDomains: string[];
    blockedApps: string[];
    isFocusMode: boolean;
  }) => Promise<void>;
  clearActivities: () => Promise<void>;
  getActivities: () => Promise<ActivityRecord[]>;
  updateTrayTitle: (title: string) => Promise<void>;
  setUserInformation: (params: { userId: string; sessionId?: string }) => Promise<void>;
  getAppVersion: () => string;
  checkForUpdates: () => Promise<{ status: "success" | "error"; message: string }>;
}

declare global {
  interface Window {
    themeMode: ThemeModeContext;
    electronWindow: ElectronWindow;
  }
}

export {};
