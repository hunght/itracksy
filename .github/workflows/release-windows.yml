name: Release Windows

on:
  push:
    tags:
      - "v*.*.*" # Trigger on version tags

permissions:
  contents: write
  packages: write

jobs:
  release-windows:
    runs-on: windows-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Azure CLI
        run: |
          Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile AzureCLI.msi
          Start-Process msiexec.exe -Wait -ArgumentList '/I AzureCLI.msi /quiet'
          Remove-Item AzureCLI.msi

      - name: Azure Login
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          az login --service-principal `
            --username $env:AZURE_CLIENT_ID `
            --password $env:AZURE_CLIENT_SECRET `
            --tenant $env:AZURE_TENANT_ID

          az trustedsigning certificate-profile show `
            --resource-group itracks `
            --account-name hung `
            --name itracksy-cert

      - name: Install Windows SDK
        run: |
          # Download Windows SDK installer
          Invoke-WebRequest -Uri https://go.microsoft.com/fwlink/p/?linkid=2196241 -OutFile winsdksetup.exe

          # Install Windows SDK with signing tools
          Start-Process -Wait -FilePath .\winsdksetup.exe -ArgumentList "/features OptionId.SigningTools /quiet"

          Remove-Item winsdksetup.exe

      - name: Setup signing tools
        run: |
          # Download nuget.exe
          Invoke-WebRequest -Uri https://dist.nuget.org/win-x86-commandline/latest/nuget.exe -OutFile nuget.exe

          # Download Trusted Signing Client
          .\nuget.exe install Microsoft.Trusted.Signing.Client -Version 1.0.53 -x

          # Create metadata.json
          $metadata = @{
            Endpoint = "https://eus.codesigning.azure.net"
            CodeSigningAccountName = "hung"
            CertificateProfileName = "itracksy-cert"
          } | ConvertTo-Json
          Set-Content -Path "metadata.json" -Value $metadata

      - name: Create data directories
        shell: bash
        run: |
          mkdir -p data
          mkdir -p out/make/data
          mkdir -p release/data
          mkdir -p dist/data

      - name: Build Windows executable
        if: runner.os == 'Windows'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_KEY: ${{ secrets.VITE_SUPABASE_KEY }}
          VITE_AXIOM_TOKEN: ${{ secrets.VITE_AXIOM_TOKEN }}
          VITE_AXIOM_ORG_ID: ${{ secrets.VITE_AXIOM_ORG_ID }}
          VITE_AXIOM_DATASET: ${{ secrets.VITE_AXIOM_DATASET }}
        run: npm run make

      - name: Sign Windows executable
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          # Get the version from package.json
          $version = (Get-Content package.json | ConvertFrom-Json).version
          $setupFile = "out/make/squirrel.windows/x64/itracksy-$version Setup.exe"

          Write-Host "Signing setup file: $setupFile"

          # Login and set Azure context
          az login --service-principal `
            --username $env:AZURE_CLIENT_ID `
            --password $env:AZURE_CLIENT_SECRET `
            --tenant $env:AZURE_TENANT_ID

          # Set subscription
          az account set --subscription $env:AZURE_SUBSCRIPTION_ID

          # Set tenant
          az account set --tenant $env:AZURE_TENANT_ID

          Write-Host "Azure context set up complete"

          # Sign using signtool with Azure.CodeSigning.Dlib
          & 'C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\signtool.exe' sign `
            /v /debug `
            /fd SHA256 `
            /tr "http://timestamp.acs.microsoft.com" `
            /td SHA256 `
            /dlib "Microsoft.Trusted.Signing.Client.1.0.53\runtimes\win-x64\native\Azure.CodeSigning.Dlib.dll" `
            /dmdf "metadata.json" `
            $setupFile

      - name: Upload artifacts
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: |
            out/make/squirrel.windows/x64/*.exe
            out/make/squirrel.windows/x64/*.nupkg
            out/make/squirrel.windows/x64/RELEASES
