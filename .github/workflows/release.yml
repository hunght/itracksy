name: Release

on:
  push:
    tags:
      - "v*.*.*" # Trigger on version tags

permissions:
  contents: write # This is required for creating releases
  packages: write

jobs:
  release:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Azure CLI
        if: runner.os == 'windows-latest'
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Azure Login
        if: runner.os == 'windows-latest'
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          az login --service-principal \
            --username $AZURE_CLIENT_ID \
            --password $AZURE_CLIENT_SECRET \
            --tenant $AZURE_TENANT_ID

      - name: Setup Azure Trusted Signing
        if: runner.os == 'windows-latest'
        run: |
          az trustedsigning certificate-profile show \
            --resource-group itracks \
            --account-name hung \
            --name itracksy-cert

      - name: Build Windows executable
        if: runner.os == 'windows-latest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_KEY: ${{ secrets.VITE_SUPABASE_KEY }}
          VITE_AXIOM_TOKEN: ${{ secrets.VITE_AXIOM_TOKEN }}
          VITE_AXIOM_ORG_ID: ${{ secrets.VITE_AXIOM_ORG_ID }}
          VITE_AXIOM_DATASET: ${{ secrets.VITE_AXIOM_DATASET }}
        run: npm run make

      - name: Sign Windows executable
        if: runner.os == 'windows-latest'
        run: |
          # Sign the main setup executable
          az trustedsigning sign \
            --resource-group itracks \
            --account-name hung \
            --certificate-profile-name itracksy-cert \
            --file "out/make/squirrel.windows/x64/iTracksy Setup.exe" \
            --output-file "out/make/squirrel.windows/x64/iTracksy Setup.exe"

          # Sign the main application executable
          az trustedsigning sign \
            --resource-group itracks \
            --account-name hung \
            --certificate-profile-name itracksy-cert \
            --file "out/make/squirrel.windows/x64/itracksy.exe" \
            --output-file "out/make/squirrel.windows/x64/itracksy.exe"

      - name: Upload artifacts
        if: runner.os == 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: |
            out/make/squirrel.windows/x64/iTracksy Setup.exe
            out/make/squirrel.windows/x64/itracksy.exe
            out/make/squirrel.windows/x64/RELEASES

      - name: Create data directories
        shell: bash
        run: |
          mkdir -p data
          mkdir -p out/make/data
          mkdir -p release/data
          mkdir -p dist/data

      - name: Install the Apple certificate
        if: runner.os == 'macOS'
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Import certificate from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH

          # Make the keychain the default
          security default-keychain -s $KEYCHAIN_PATH

          # Add keychain to search list
          security list-keychain -d user -s $KEYCHAIN_PATH $(security list-keychains -d user | tr -d '"')

          # Verify certificate import
          echo "Verifying certificate..."
          security find-identity -v

          # Allow codesign to access keychain
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      - if: runner.os == 'macOS'
        name: Build for macOS
        env:
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          NODE_ENV: production
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_KEY: ${{ secrets.VITE_SUPABASE_KEY }}
          VITE_AXIOM_TOKEN: ${{ secrets.VITE_AXIOM_TOKEN }}
          VITE_AXIOM_ORG_ID: ${{ secrets.VITE_AXIOM_ORG_ID }}
          VITE_AXIOM_DATASET: ${{ secrets.VITE_AXIOM_DATASET }}
        run: |
          echo "Setting up notarization environment..."
          echo "Checking for entitlements.plist..."
          if [ ! -f "entitlements.plist" ]; then
            echo " entitlements.plist not found"
            exit 1
          fi
          echo "Apple ID: $APPLE_ID"
          echo "Team ID: $APPLE_TEAM_ID"
          echo "Signing Identity: $APPLE_SIGNING_IDENTITY"

          # Verify keychain access
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $RUNNER_TEMP/app-signing.keychain-db

          npm run publish

      - name: Clean up keychain
        if: runner.os == 'macOS'
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
